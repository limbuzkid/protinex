{#
/**
 * @file
 * Himalaya's theme implementation to display a node.
 *
 * Available variables:
 * - node: Full node entity.
 *   - id: The node ID.
 *   - bundle: The type of the node, for example, "page" or "article".
 *   - authorid: The user ID of the node author.
 *   - createdtime: Formatted creation date. Preprocess functions can
 *     reformat it by calling format_date() with the desired parameters on
 *     $variables['node']->getCreatedTime().
 * - label: The title of the node.
 * - content: All node items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - author_picture: The node author user entity, rendered using the "compact"
 *   view mode.
 * - metadata: Metadata for this node.
 * - date: Themed creation date field.
 * - author_name: Themed author name field.
 * - url: Direct URL of the current node.
 * - display_submitted: Whether submission information should be displayed.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - node: The current template type (also known as a "theming hook").
 *   - node--type-[type]: The current node type. For example, if the node is an
 *     "Article" it would result in "node--type-article". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - node--view-mode-[view_mode]: The View Mode of the node; for example, a
 *     teaser would result in: "node--view-mode-teaser", and
 *     full: "node--view-mode-full".
 *   The following are controlled through the node publishing options.
 *   - node--promoted: Appears on nodes promoted to the front page.
 *   - node--sticky: Appears on nodes ordered above other non-sticky nodes in
 *     teaser listings.
 *   - node--unpublished: Appears on unpublished nodes visible only to site
 *     admins.
 * - title_attributes: Same as attributes, except applied to the main title
 *   tag that appears in the template.
 * - content_attributes: Same as attributes, except applied to the main
 *   content tag that appears in the template.
 * - author_attributes: Same as attributes, except applied to the author of
 *   the node tag that appears in the template.
 * - title_prefix: Additional output populated by modules, intended to be
 *   displayed in front of the main title tag that appears in the template.
 * - title_suffix: Additional output populated by modules, intended to be
 *   displayed after the main title tag that appears in the template.
 * - view_mode: View mode; for example, "teaser" or "full".
 * - teaser: Flag for the teaser state. Will be true if view_mode is 'teaser'.
 * - page: Flag for the full page state. Will be true if view_mode is 'full'.
 * - readmore: Flag for more state. Will be true if the teaser content of the
 *   node cannot hold the main body content.
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_node()
 */
#}
{%
  set classes = [
    'node',
    'grayborder box_shadow margin_bottom border_radius padding',
    'node--type-' ~ node.bundle|clean_class,
    node.isPromoted() ? 'node--promoted',
    node.isSticky() ? 'node--sticky',
    not node.isPublished() ? 'node--unpublished',
    view_mode ? 'node--view-mode-' ~ view_mode|clean_class,
    'clearfix',
  ]
%}
{% set cur_url = path('<current>') %}
{% if 'blog' in curl_url %}
	{% set titleClass = 'yellowText' %}
{% endif %}

{% if node.field_image.target_id %}
{%
	set wave = node.field_wave_color.value|split(',')
%}
  <section class="section bannerSection">
    <div class="tempBanner">
      <img src="{{ file_url(node.field_image.entity.uri.value) }}" alt="banner" data-banner="{{ file_url(node.field_image.entity.uri.value) }}" data-banner-mobile="{{ file_url(node.field_wrapper_image.entity.uri.value) }}">
    </div>
    <div class="bannerWave">
				<svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
					 width="5760px" height="256.104px" viewBox="0 0 5760 256.104" enable-background="new 0 0 5760 256.104" xml:space="preserve"  preserveAspectRatio="none">
					<path class="topFill"  fill="{{ wave[0] }}" d="M0,114.795c121.796,28,273.796,66.667,491.129,5.333c264.626-74.681,416.667-90.667,627.333-18
						c273.396,94.304,463.596,35.19,616.667-21.333c293.86-108.512,525.837-106.824,806.446-0.348
						c598.698,227.174,758.009,122.678,939.078,42.444c167-74,393.488-172.591,645.476-81.096c121.144,43.987,320.049,184.506,577,179
						c280-6,625.486-202,1056.871-106v141.309H0V114.795z"/>
					<path class="bottomFill" fill="{{ wave[1] }}" d="M0,157.177c164.327,59.618,342.795,45.618,557.796-39.049c242.612-95.54,438.837-53.94,611.765,13.468
						c269.455,105.035,524.404,17.174,682.693-30.604c264.211-79.748,504.601-41.485,653.447-2.101
						c359.236,95.05,524.974,205.49,830.199,86.051c316.537-123.867,609.317-210.178,931.229-62.146
						c274,126,399.884,106.925,525.109,98.784c177.056-11.51,599.21-178.118,967.762-64.402v98.927H0V157.177z"/>
					<path class="whiteFill" fill="#FFFFFF" d="M0,214.573c274.994,80.812,403.129-4.777,612.129-95.777c275.455-119.935,463.657-0.523,642.568,57.871
						c279.025,91.07,556.754-3.617,665.275-30.734c188.249-47.041,464.127-43.249,665.648,2.184
						c255.703,57.646,470.738,151.178,869.508,18.68c259.875-86.348,536-97.769,804-16c251.557,76.752,435.64,119.716,722.648,47.996
						c348.1-86.985,642.838-35.496,778.223,15.781v41.531H0V214.573z"/>
				</svg>
			</div>
  </section>
	{% if 'blog' not in cur_url %}
		<section class="section pageTitle" data-scroll="">
			<div class="container">
				<h1 class="center {{ titleClass }}"><strong>{{ node.title.value | raw}}</strong></h1>
				{% if node.body.value %}
					{{ node.body.value | raw }}
				{% endif %}	
			</div>
		</section>
	{% endif %}

{% else %}
  <article{{ attributes.addClass(classes) }}>
    <header>
      {{ title_prefix }}
      {% if not page %}
        <h2{{ title_attributes.addClass('node__title') }}>
          <a href="{{ url }}" rel="bookmark">{{ label }}</a>
        </h2>
      {% endif %}
      {{ title_suffix }}
  
    </header>
    <div{{ content_attributes.addClass('node__content', 'clearfix') }}>
      {{ content|without('comment', 'links') }}
    </div>
    {% if content.links %}
      <div class="node__links">{{ content.links }}</div>
    {% endif %}
    {{ content.comment }}
  </article>
{% endif %}




